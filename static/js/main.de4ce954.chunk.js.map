{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["serverHostName","Instrument","props","react_default","a","createElement","value","instr_code","document","title","Order","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","_this","orderid","timestamp","instrument","side","quantity","price","quantity_filled","fill_price","id","status","notes","onClick","cancelOrder","href","orderID","_this2","axios","post","then","res","updateView","React","Component","Trade","tradeid","TextInput","_this3","console","log","state","inputValue","_this4","for","input_name","tag","className","onChange","evt","updateInputValue","onBlur","submitInputValue","setState","target","onInputUpdate","InstrumentSelector","_this5","instruments","getInstruments","_this6","get","data","length","inst_list","InstrCode","_this7","map","instr","App","_this8","orders","trades","ord_props","handleClick","bind","assertThisInitialized","key","ord_p","refreshData","getOrders","getTrades","_this9","order_list","reverse","_this10","trade_list","_this11","instCode","instcode","response","error","_this12","App_InstrumentSelector","onNewOrderUpdate","App_TextInput","order","App_Order","OrderID","Timestamp","Side","Quantity","Price","QuantityFilled","FillPrice","Status","Notes","trade","App_Trade","TradeID","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.de4ce954.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios';\nimport './App.css';\n\nconst serverHostName = 'http://localhost:8080'\n\ndocument.title = \"Trading Dashboard\";\n\nfunction Instrument(props) {\n  return (\n    <option value={props.instr_code}>{props.instr_code}</option>\n  )\n}\n\nclass Order extends React.Component {\n\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n      return (\n        <tr>\n          <td>{this.props.orderid}</td>\n          <td>{this.props.timestamp}</td>\n          <td>{this.props.instrument}</td>\n          <td>{this.props.side}</td>\n          <td>{this.props.quantity}</td>\n          <td>{this.props.price}</td>\n          <td>{this.props.quantity_filled}</td>\n          <td>{this.props.fill_price}</td>\n          <td id=\"order_status\">{this.props.status}</td>\n          <td id=\"order_notes\">{this.props.notes}</td>\n          <td id=\"order_cancel\" onClick={() => this.cancelOrder(this.props.orderid)}><a href=\"#\">Cancel</a></td>\n        </tr>\n      );\n    }\n\n    cancelOrder(orderID) {\n      axios.post(serverHostName + '/order/delete', {\n        \"orderID\": this.props.orderid\n\t    }).then(res => this.props.updateView());\n    }\n}\n\nclass Trade extends React.Component {\n\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n      return (\n        <tr>\n          <td>{this.props.tradeid}</td>\n          <td>{this.props.timestamp}</td>\n          <td>{this.props.orderid}</td>\n          <td>{this.props.quantity}</td>\n          <td>{this.props.price}</td>\n        </tr>\n      );\n    }\n}\n\nclass TextInput extends React.Component {\n\n    constructor(props) {\n        super(props);\n        console.log(props)\n        this.state = {\n            inputValue: ''\n        }\n    }\n\n    render() {\n\n        return (\n            <div>\n              <label id=\"lab\" for=\"in\">{this.props.input_name}: </label>\n              <br />\n              <input id={this.props.tag} className=\"input_order\" value={this.state.inputValue} onChange={evt => this.updateInputValue(evt)} onBlur={evt => this.submitInputValue(evt)}/>\n            </div>\n        )\n    }\n\n    updateInputValue(evt) {\n      this.setState({\n          inputValue: evt.target.value\n      });\n    }\n\n    submitInputValue(evt) {\n      this.props.onInputUpdate(this.props.tag, evt.target.value);\n    }\n}\n\nclass InstrumentSelector extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            instruments: []\n        }\n    }\n\n    componentDidMount() {\n      this.getInstruments()\n    }\n\n    getInstruments() {\n      axios.get(serverHostName + `/instruments`)\n        .then(res => {\n          console.log(res.data);\n          console.log(res.data.length);\n          const inst_list = res.data;\n          this.setState({ instruments: inst_list });\n          // initialize the instrument with the first instrument available\n          this.props.onInputUpdate(this.props.tag, this.state.instruments[0].InstrCode);\n        });\n    }\n\n    render() {\n\n        return (\n            <div>\n              <label id=\"lab\" for=\"sel\">Instrument: </label>\n              <br />\n              <select id=\"sel\" value={this.state.inputValue} onChange={evt => this.updateInputValue(evt)} onBlur={evt => this.submitInputValue(evt)}>\n                {this.state.instruments.map(instr =>\n                  <Instrument instr_code={instr.InstrCode} />\n                )}\n\n              </select>\n            </div>\n        )\n    }\n\n    updateInputValue(evt) {\n      this.setState({\n          inputValue: evt.target.value\n      });\n    }\n\n    submitInputValue(evt) {\n      this.props.onInputUpdate(this.props.tag, evt.target.value);\n    }\n}\n\nclass App extends React.Component {\n\n  constructor() {\n    super()\n\n    this.handleClick = this.handleClick.bind(this)\n  }\n\n  state = {\n    orders: [],\n    trades: [],\n    ord_props: {}\n  }\n\n  onNewOrderUpdate(key, value) {\n    var ord_p = this.state.ord_props\n    ord_p[key] = value\n    console.log(\"onNewOrderUpdate: \" + key + \":\" + value);\n\tthis.setState({ ord_props: ord_p })\n  }\n\n  componentDidMount() {\n    this.refreshData();\n  }\n\n  refreshData() {\n    this.getOrders()\n    this.getTrades()\n  }\n\n  getOrders() {\n    axios.get(serverHostName + `/order`)\n      .then(res => {\n        console.log(res.data);\n        console.log(res.data.length);\n        const order_list = res.data;\n        this.setState({ orders: order_list.reverse() });\n      });\n  }\n\n  getTrades() {\n    axios.get(serverHostName + `/trade`)\n      .then(res => {\n        console.log(res.data);\n        console.log(res.data.length);\n        const trade_list = res.data;\n        this.setState({ trades: trade_list.reverse() });\n      });\n  }\n\n  handleClick() {\n    console.log('Price: ' + this.state.ord_props.price)\n    axios.post(serverHostName + '/order/add', {\n      \"instCode\": this.state.ord_props.instcode,\n      \"quantity\": this.state.ord_props.quantity,\n      \"price\": this.state.ord_props.price,\n      \"notes\": this.state.ord_props.notes,\n      \"side\": this.state.ord_props.side,\n\t})\n\t.then(\n\t\t(response) => { console.log(response); this.refreshData() },\n\t\t(error) => { console.log(error) }\n\t);\n  }\n\n  render() {\n    return (\n      <div>\n        <div>\n          <h1 id=\"title\">Order entry</h1>\n          <InstrumentSelector\n             onInputUpdate={(key, value) => this.onNewOrderUpdate(key, value)} tag=\"instcode\"/>\n          <TextInput\n             onInputUpdate={(key, value) => this.onNewOrderUpdate(key, value)} input_name=\"Side\" tag=\"side\"/>\n          <TextInput\n             onInputUpdate={(key, value) => this.onNewOrderUpdate(key, value)} input_name=\"Quantity\" tag=\"quantity\"/>\n          <TextInput\n             onInputUpdate={(key, value) => this.onNewOrderUpdate(key, value)} input_name=\"Price\" tag=\"price\"/>\n          <TextInput\n             onInputUpdate={(key, value) => this.onNewOrderUpdate(key, value)} input_name=\"Notes\" tag=\"notes\"/>\n          <button className=\"button\" id=\"btn_send_order\" onClick={this.handleClick}>Send order</button>\n        </div>\n        <ul>\n        <div className=\"mainBlock\">\n            <div className=\"floatLeft\">\n            <h1 id=\"title\">Orders</h1>\n            <table id=\"orders\">\n              <tr>\n                <th>Order ID</th>\n                <th>Timestamp</th>\n                <th>Instrument</th>\n                <th>Side</th>\n                <th>Quantity</th>\n                <th>Price</th>\n                <th>Filled Quantity</th>\n                <th>Fill Price</th>\n                <th>Status</th>\n                <th>Notes</th>\n                <th>Action</th>\n              </tr>\n              {this.state.orders.map(order =>\n                <Order orderid={order.OrderID} timestamp={order.Timestamp} instrument={order.InstrCode} side={order.Side} quantity={order.Quantity} price={order.Price} quantity_filled={order.QuantityFilled} fill_price={order.FillPrice} status={order.Status} notes={order.Notes} updateView={() => this.refreshData()} />\n              )}\n            </table>\n            </div>\n            <div className=\"floatRight\">\n            <h1 id=\"title\">Trades</h1>\n            <table id=\"orders\">\n              <tr>\n                <th>Trade ID</th>\n                <th>Timestamp</th>\n                <th>Order ID</th>\n                <th>Quantity</th>\n                <th>Price</th>\n              </tr>\n              {this.state.trades.map(trade =>\n                <Trade tradeid={trade.TradeID} timestamp={trade.Timestamp} orderid={trade.OrderID} quantity={trade.Quantity} price={trade.Price} />\n              )}\n            </table>\n            </div>\n        </div>\n        </ul>\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('app'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}